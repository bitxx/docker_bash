version: '3.8'

networks:
  base:

services:
  # 1. 全局-nosql数据库mongodb
  x-mongo:
    image: ${IMAGE_MONGO}
    container_name: ${CONTAINER_MONGO}
    environment:
      MONGO_INITDB_ROOT_USERNAME: jason
      MONGO_INITDB_ROOT_PASSWORD: jason
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_MONGO}/db:/data/db
      - $ROOT_PATH/data-server/${CONTAINER_MONGO}/file:/data/file
#    command: --wiredTigerCacheSizeGB 3
    ports:
      - 27017:27017
    networks:
      base:

  #  2. 全局-关系型数据库mysql
  x-mysql:
    image: ${IMAGE_MYSQL}
    container_name: ${CONTAINER_MYSQL}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_MYSQL}/data:/var/lib/mysql
      - $ROOT_PATH/data-server/${CONTAINER_MYSQL}/conf:/etc/mysql/conf.d
      - $ROOT_PATH/data-server/${CONTAINER_MYSQL}/init:/docker-entrypoint-initdb.d/
    command:
      --lower_case_table_names=1
      --default-authentication-plugin=mysql_native_password
      --wait_timeout=2880000
      --max_allowed_packet=41943040
    environment:
      - MYSQL_ROOT_PASSWORD=xhmT1ThVUeAMegih
      - TZ=Asia/Shanghai
    ports:
      - 9906:3306
    networks:
      base:

  #  2. 全局-关系型数据库mysql，innodb配置主要是为了防止还原大量数据时造成的崩溃
  x-mariadb:
    image: ${IMAGE_MARIADB}
    container_name: ${CONTAINER_MARIADB}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_MARIADB}/data:/var/lib/mysql
      - $ROOT_PATH/data-server/${CONTAINER_MARIADB}/conf:/etc/mysql/conf.d
#      - $ROOT_PATH/data-server/${CONTAINER_MARIADB}/init:/docker-entrypoint-initdb.d/
    command:
      --lower_case_table_names=1
      --default-authentication-plugin=mysql_native_password
      --wait_timeout=2880000
      --max_allowed_packet=41943040
      --innodb_buffer_pool_size=4G
      --innodb_log_buffer_size=256M
      --innodb_log_file_size=1G
      --innodb_write_io_threads=16
    environment:
      - MYSQL_ROOT_PASSWORD=xhmT1ThVUeAMegih
      - TZ=Asia/Shanghai
    ports:
      - 9907:3306
    networks:
      base:

  #  3. 全局-缓存 redis
  x-redis:
    image: ${IMAGE_REDIS}
    container_name: ${CONTAINER_REDIS}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_REDIS}/conf/redis.conf:/etc/redis/redis.conf:rw
      - $ROOT_PATH/data-server/${CONTAINER_REDIS}/data:/data:rw
    ports:
      - 6379:6379
    networks:
      base:
    command:
      redis-server /etc/redis/redis.conf --appendonly yes  --requirepass root

  # 4. java
  # 需要追加执行目录，无法在已有PATH之后追加，目前能想到的就是PATH重写
  # 若需要使用容器mysql，则 links中将mysql注释取消
  x-java:
    image: ${IMAGE_JAVA}
    container_name: ${CONTAINER_JAVA}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_JAVA}/app:/${CONTAINER_JAVA}/app:rw
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /usr/bin/docker:/usr/bin/docker
    ports:
      - 8081:8081
    links:
      - ${CONTAINER_REDIS}
#      - ${CONTAINER_MYSQL}
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/${CONTAINER_JAVA}/app/bin
    working_dir: /${CONTAINER_JAVA}/app
    networks:
      base:
    command:
#       /bin/bash -c "while true;do echo hello docker;sleep 1;done"
      java -jar app.jar --jeefree.profile=/${CONTAINER_JAVA}/app/userfile/ --spring.redis.host=${CONTAINER_REDIS} --spring.redis.port=6379 --spring.datasource.druid.master.url=jdbc:mysql://db地址:对应端口/jeefree?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8 --spring.datasource.druid.master.username=db用户名 --spring.datasource.druid.master.password=db密码

  # 5. nginx
  # 注意：volumes中的conf.d需要设置配置文件时再开放，配置文件可参考data-server中对应目录已提供的
  x-nginx:
    image: ${IMAGE_NGINX}
    container_name: ${CONTAINER_NGINX}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_NGINX}/conf.d:/etc/nginx/conf.d:rw
#            - $ROOT_PATH/data-server/${CONTAINER_NGINX}/conf:/etc/nginx/nginx.conf:rw
      - $ROOT_PATH/data-server/${CONTAINER_NGINX}/log:/var/log/nginx:rw
      - $ROOT_PATH/data-server/${CONTAINER_NGINX}/www:/usr/share/nginx/html:rw
#    links:
#      - ${CONTAINER_JAVA}
    ports:
      - 8082:80
      - 443:443
    networks:
      base:

  #  6. ipfs单节点
  x-ipfs:
    image: ${IMAGE_IPFS}
    container_name: ${CONTAINER_IPFS}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_IPFS}/export:/export:rw
      - $ROOT_PATH/data-server/${CONTAINER_IPFS}/data:/data/ipfs:rw
    ports:
      - 4001:4001
      - 5001:5001
      - 8081:8080
    networks:
      base:

  # 7. docker管理工具
  x-portainer:
    image: ${IMAGE_PORTAINER}
    container_name: ${CONTAINER_PORTAINER}
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $ROOT_PATH/data-server/${CONTAINER_PORTAINER}/data:/data
    networks:
      base:

  #  8. 消息队列
  # 4369 -- erlang发现口
  # 5672 -- client端通信口
  # 15672 -- 管理界面ui端口
  # 25672 -- server间内部通信口，集群之间
  x-mq:
    hostname: localhost
    container_name: ${CONTAINER_MQ}
    environment:
      RABBITMQ_DEFAULT_VHOST: "/test"
      RABBITMQ_DEFAULT_USER: "root"
      RABBITMQ_DEFAULT_PASS: "root"
    image: ${IMAGE_MQ}
    volumes:
#            windows下需要映射到当前windows用户的文件目录下，比如：C:\Users\${username}，未避免影响到开发，这里将该映射关闭，生产时，Linux下一定要开启
#            - $ROOT_PATH/data-server/${CONTAINER_MQ}/data:/var/lib/rabbitmq
      - $ROOT_PATH/data-server/${CONTAINER_MQ}/log:/var/log/rabbitmq/log
    ports:
      - 15672:15672
      - 4369:4369
      - 5672:5672
      - 25672:25672
    networks:
      base:
#    command:
#      - /bin/bash
#      - -c
#      - |
#        rabbitmq-plugins enable rabbitmq_management

  # 8. yapi接口管理工具，参考：https://github.com/fjc0k/docker-YApi#readme
  x-yapi:
    image: ${IMAGE_YAPI}
    container_name: ${CONTAINER_YAPI}
    environment:
      - YAPI_ADMIN_ACCOUNT=jason@163.com  # 登入账号
      - YAPI_ADMIN_PASSWORD=jason123                # 登入密码
      - YAPI_CLOSE_REGISTER=true                # 关闭注册功能
      - YAPI_DB_SERVERNAME=x-mongo              # mongodb 数据库地址
      - YAPI_DB_PORT=27017                      # mongodb 端口
      - YAPI_DB_DATABASE=yapi                   # mongodb 数据库名
      - YAPI_DB_USER=jason
      - YAPI_DB_PASS=jason
      - YAPI_DB_AUTH_SOURCE=admin
      - YAPI_MAIL_ENABLE=false                  # 不启用邮箱
      - YAPI_LDAP_LOGIN_ENABLE=false            # 不启用 loap 登入
      - YAPI_PLUGINS=[]                         # 插件
    ports:
      - 3000:3000
    depends_on:
      - ${CONTAINER_MONGO}
    networks:
      base:

  # 11. python
  x-python:
    image: ${IMAGE_PYTHON}
    container_name: ${CONTAINER_PYTHON}
    tty: true
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_PYTHON}/data:/docs
    networks:
      base:

  # 12. consul注册发现-第一个节点
  x-consul1:
    image: ${IMAGE_CONSUL}
    container_name: ${CONTAINER_CONSUL1}
    command: agent -server -bootstrap-expect=3 -node=${CONTAINER_CONSUL1} -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1
    ports:
      - 8501:8500
    networks:
      base:

  # 13. consul注册发现-第二个节点
  x-consul2:
    image: ${IMAGE_CONSUL}
    container_name: ${CONTAINER_CONSUL2}
    command: agent -server -retry-join=${CONTAINER_CONSUL1} -node=${CONTAINER_CONSUL2} -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1
    depends_on:
      - ${CONTAINER_CONSUL1}
    ports:
      - 8502:8500
    networks:
      base:

  # 14. consul注册发现-第三个节点
  x-consul3:
    image: ${IMAGE_CONSUL}
    container_name: ${CONTAINER_CONSUL3}
    command: agent -server -retry-join=${CONTAINER_CONSUL1} -node=${CONTAINER_CONSUL3} -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1
    depends_on:
      - ${CONTAINER_CONSUL1}
    ports:
      - 8503:8500
    networks:
      base:

  # 15. consul注册发现-web可视化
  x-ui:
    image: ${IMAGE_CONSUL}
    container_name: ${CONTAINER_UI}
#    command: agent -retry-join=${CONTAINER_CONSUL1} -node=${CONTAINER_UI} -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1 -ui -hcl='acl { enabled=true enable_token_persistence=true default_policy="deny" } '
    command: agent -retry-join=${CONTAINER_CONSUL1} -node=${CONTAINER_UI} -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1 -ui
    ports:
      - 8504:8500
    depends_on:
      - ${CONTAINER_CONSUL2}
      - ${CONTAINER_CONSUL3}
    networks:
      base:


  # 16. 微服务etcd-第一个client节点
  x-etcd1:
    image: ${IMAGE_ETCD}
    container_name: ${CONTAINER_ETCD1}
    environment:
      - ETCD_ADVERTISE_CLIENT_URLS=http://${CONTAINER_ETCD1}:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://${CONTAINER_ETCD1}:2380
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster
      - ETCD_INITIAL_CLUSTER=${CONTAINER_ETCD1}=http://${CONTAINER_ETCD1}:2380,${CONTAINER_ETCD2}=http://${CONTAINER_ETCD2}:2380,${CONTAINER_ETCD3}=http://${CONTAINER_ETCD3}:2380
      - ETCD_NAME=${CONTAINER_ETCD1}
      - ETCD_DATA_DIR=/opt/bitnami/etcd/data
      - ETCD_INITIAL_CLUSTER_STATE=new
    ports:
      - 2379:2379
    networks:
      base:

  # 17. 微服务etcd-第二个client节点
  x-etcd2:
    image: ${IMAGE_ETCD}
    container_name: ${CONTAINER_ETCD2}
    environment:
      - ETCD_ADVERTISE_CLIENT_URLS=http://${CONTAINER_ETCD2}:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://${CONTAINER_ETCD2}:2380
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster
      - ETCD_INITIAL_CLUSTER=${CONTAINER_ETCD1}=http://${CONTAINER_ETCD1}:2380,${CONTAINER_ETCD2}=http://${CONTAINER_ETCD2}:2380,${CONTAINER_ETCD3}=http://${CONTAINER_ETCD3}:2380
      - ETCD_NAME=${CONTAINER_ETCD2}
      - ETCD_DATA_DIR=/opt/bitnami/etcd/data
      - ETCD_INITIAL_CLUSTER_STATE=new
    ports:
      - 22379:2379
    networks:
      base:

  # 18. 微服务etcd-第三个client节点
  x-etcd3:
    image: ${IMAGE_ETCD}
    container_name: ${CONTAINER_ETCD3}
    environment:
      - ETCD_ADVERTISE_CLIENT_URLS=http://${CONTAINER_ETCD3}:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://${CONTAINER_ETCD3}:2380
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster
      - ETCD_INITIAL_CLUSTER=${CONTAINER_ETCD1}=http://${CONTAINER_ETCD1}:2380,${CONTAINER_ETCD2}=http://${CONTAINER_ETCD2}:2380,${CONTAINER_ETCD3}=http://${CONTAINER_ETCD3}:2380
      - ETCD_NAME=${CONTAINER_ETCD3}
      - ETCD_DATA_DIR=/opt/bitnami/etcd/data
      - ETCD_INITIAL_CLUSTER_STATE=new
    ports:
      - 32379:2379
    networks:
      base:

  # 19. etcdui管理
  x-etcdui:
    image: ${IMAGE_ETCDUI}
    container_name: ${CONTAINER_ETCDUI}
    environment:
      HOST: "0.0.0.0"
    ports:
      - 2300:8080
    depends_on:
      - ${CONTAINER_ETCD1}
      - ${CONTAINER_ETCD2}
      - ${CONTAINER_ETCD3}
#    command: ./e3w -conf /app/conf/config.default.ini
#    volumes:
#      - "/var/docker/e3w/conf/config.ini:/app/conf/config.default.ini"
    networks:
      base:

  # 20. arbitrum测试节点
  x-arbnode:
    image: ${IMAGE_ARBNODE}
    container_name: ${CONTAINER_ARBNODE}
    ports:
      - 0.0.0.0:8547:8547
      - 0.0.0.0:8548:8548
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_ARBNODE}/data:/home/user/.arbitrum/rinkeby
    command: --l1.url=https://l1-rinkeby-node:8545
#    command: --l1.url=https://l1-node:8545
    networks:
      base:
  # 21. dtf测试专用，其中extra_hosts必须有，否则无法访问.dtf官方提供的容器版本不稳定，对容器网络支持不足，目前还是建议在主机直接部署测试
  x-dtf:
    image: ${IMAGE_DTF}
    container_name: ${CONTAINER_DTF}
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    environment:
      IS_DOCKER: 1
      MICRO_SERVICE_END_POINT: "0.0.0.0:36790"
      MICRO_SERVICE_TARGET: "etcd://${CONTAINER_ETCD1}:2379/dtfservice"
      MICRO_SERVICE_DRIVER: "dtm-driver-gozero"
    ports:
      - 0.0.0.0:36789:36789
      - 0.0.0.0:36790:36790
    networks:
      base:

  # 22. yarn-node环境，nodejs后端部署
  x-ynode:
    image: ${IMAGE_YNODE}
    container_name: ${CONTAINER_YNODE}
    ports:
      - 0.0.0.0:9000:3001
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_YNODE}/data:/data/
    networks:
      base:
    command:
      - /bin/sh
      - -c
      - |
        cd /data
        NODE_ENV=production node ./web/index.js
